#!/usr/bin/python3
import json
import logging
import os
import signal
import sys
import time

import requests
from telegram import Update
from telegram.ext import Application, CommandHandler

logging.basicConfig(
    filename="meduza_fluffy.log",
    filemode="a",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
global logger
logger = logging.getLogger(__name__)


class Config:
    __slots__ = ["TG_TOKEN", "N_LOGIN", "N_PASSWORD", "CURRENT_HW", "config_path", "__dict__"]

    def __init__(self, filename="config.json"):
        self.config_path = os.path.join(os.path.abspath("."), filename)
        self.__dict__ = self.load(self.config_path)
        for k, v in self.__dict__.items():
            setattr(self, k, v)

    def get(self, param):
        return getattr(self, param, None)

    def save(self, param):
        with open(self.config_path, "w", encoding="utf-8") as f:
            json.dump(self.__dict__.items(), f, ensure_ascii=False)

    @staticmethod
    def load(config_path) -> dict:
        with open(config_path, "r") as f:
            config = json.load(f)
        return config


config = Config()

TOKEN = config.get("TG_TOKEN")
LOGIN = config.get("N_LOGIN")
PASSWORD = config.get("N_PASSWORD")
CURRENT_HW = config.get("CURRENT_HW")

if not TOKEN or not LOGIN:
    logger.error(f"Нет конфига для приложения: {config.config_path}")
    exit(1)


async def send_ok(update, context):
    _rest_checked = 0
    _is_error = False
    try:
        while True:
            time.sleep(60)
            r = HC.get_unread_hw()
            if _is_error:
                msg = "Продолжаем работать после возникновения ошибки."
                logger.warn(msg)
                await update.message.reply_text(msg)
                _is_error = False
            if r.get("waiting_review", 0) > 0:
                msg = f"Нужно проверить домашку! https://netology.ru/trainer/tasks  {str(r)}"
                await update.message.reply_text(msg)
            elif r.get("rest_checked", _rest_checked) > _rest_checked:
                rest_checked = r.get("rest_checked")
                msg = f"Кто то проверил еще одну домашку https://netology.ru/trainer/tasks  было {str(_rest_checked)} стало {str(rest_checked)}"
                _rest_checked = rest_checked
                await update.message.reply_text(msg)
    except Exception as e:
        logger.error(f"Ошибка при отправке сообщения: {e}")
        _is_error = True
        await update.message.reply_text("Требуется повторно перезапустить метод возникла ошибка")


async def start(update, context):
    await update.message.reply_text("hi")


class HomeChecker:
    def __init__(self, creds):
        self.creds = creds
        self.base_url = "https://netology.ru"
        self.backend_api = "/backend/api"
        self.s = requests.Session()
        self.is_loggedin = False
        self.headers = {
            "authority": "netology.ru",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "sec-ch-ua": '" Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"',
            "accept": "application/json, text/plain, */*",
        }
        self.cookies = {
            "tmr_lvid": "3026897ae378dcf071bf451f29922bf3",
            "tmr_lvidTS": "1659961729338",
            "scaleo_source_cookie": "false",
            "flocktory-uuid": "06c2c29e-e8d9-4212-8511-31610470ece6-2",
            "adrcid": "A_JGnOd7bgoqufc7eRpLoew",
            "_ym_uid": "1659961729695603560",
            "_ym_d": "1701789846",
            "_tt_enable_cookie": "1",
            "_ttp": "xDd0QIMqYDYCjD27utA9aosMlQE",
            "gbid": "ecaf25ca-0395-42db-8901-7e3cc55c8523",
            "_tm_lt_sid": "1703857444826.979422",
            "advcake_utm_webmaster": "",
            "advcake_click_id": "",
            "gdeslon.ru.__arc_domain": "gdeslon.ru",
            "analytic_id": "1707252509184433",
            "_gcl_au": "1.1.729054790.1709567941",
            "CookiesAgreementConfirmed": "1",
            "g4c_x": "1",
            "gbid": "ecaf25ca-0395-42db-8901-7e3cc55c8523",
            "_tm_lt_sid": "1703857444826.979422",
            "advcake_utm_webmaster": "",
            "advcake_click_id": "",
            "gdeslon.ru.__arc_domain": "gdeslon.ru",
            "analytic_id": "1707252509184433",
            "_gcl_au": "1.1.729054790.1709567941",
            "CookiesAgreementConfirmed": "1",
            "g4c_x": "1",
            "tmr_lvid": "3026897ae378dcf071bf451f29922bf3",
            "aprt_last_partner": "actionpay",
            "aprt_last_apclick": "",
            "advcake_session_id": "f727f94b-e9e8-8e19-ef65-20e50d86eded",
            "_gid": "GA1.2.526464754.1712240432",
            "adrcid": "A_JGnOd7bgoqufc7eRpLoew",
            "domain_sid": "Yz9E0HSDtQ8BXrLjK57rA%3A1712240435342",
            "_ym_isad": "2",
            "_ym_visorc": "b",
            "adrdel": "1",
            "_ga_7ELF84KBBS": "GS1.1.1712240629.2.1.1712240646.0.0.0",
            "_gat": "1",
            "rtgtCookie": "undefined",
            "aprt_last_apsource": "4050826933468921860",
            "_ga_1KDT7MYG45": "GS1.1.1712240876.6.0.1712240883.0.0.0",
            "_gat_lms": "1",
            "mindboxDeviceUUID": "e9b5d829-9a53-4d05-93cf-d04675a96f9c",
            "_ga": "GA1.2.567807548.1701789845",
            "tmr_detect": "0%7C1712240898794",
            "_gat_UA-22225928-1": "1",
            "_ga_RV427KQKHM": "GS1.2.1712240433.51.1.1712240910.25.0.0",
            "_ga_VSW32GHPTV": "GS1.1.1712240433.59.1.1712240910.0.0.0",
        }

    def login(self):
        url_auth = "/user/sign_in"
        url = self.base_url + self.backend_api + url_auth
        response = self.s.post(url, data=self.creds)
        self.s.headers = self.headers
        if response.status_code == 200:
            cookies = response.cookies
            self.s.cookies = cookies
            self.is_loggedin = True
            logger.info("вы авторизовались успешно!")
        else:
            logger.error("вы не авторизованы!")

    def get_unread_hw(self):
        url_unread = "/expert/homeworks_tabs_count?q%5Blesson_task_task_type_eq%5D=1"
        url = self.base_url + self.backend_api + url_unread
        return self._get(url)

    def _get(self, url):
        try:
            if not self.is_loggedin:
                logger.info("Повторно авторизуемся")
                self.login()

            response = self.s.get(url)
            logger.info(f"отправили запрос {url}")
            if response.status_code == 200:
                logger.info(f"получили ответ: {response.text}")
                return response.json()
            else:
                logger.error(f"Ошибка при выполнении запроса: {str(response.status_code)}")
                self.is_loggedin = False
                return dict()
        except Exception as e:
            self.is_loggedin = False
            logger.error(f"Ошибка при выполнении запроса: {str(e)}")
            return dict()

    def get_hw_name(self):
        _url = "/expert/homeworks?q%5Bevents_event_in%5D%5B%5D=to_rework&q%5Bevents_event_in%5D%5B%5D=accepted_with_awesome_score&q%5Bevents_event_in%5D%5B%5D=accepted_with_good_score&q%5Bevents_event_in%5D%5B%5D=accepted_with_bad_score&q%5Bevents_user_id_eq%5D=7059773&q%5Blesson_task_task_type_eq%5D=1&q%5Bs%5D=updated_at%20desc&q%5Bstatus_in%5D%5B%5D=0&q%5Bstatus_in%5D%5B%5D=2&q%5Bstatus_in%5D%5B%5D=3&q%5Bstatus_in%5D%5B%5D=4&q%5Bstatus_in%5D%5B%5D=5"
        url = self.base_url + self.backend_api + _url
        response = self._get(url)
        return response


def sigterm_handler(signum, frame):
    logger.info("Получен сигнал SIGTERM. Выполняется завершение работы...")
    application.stop()
    sys.exit(0)


def main():
    signal.signal(signal.SIGTERM, sigterm_handler)
    global application
    application = Application.builder().token(TOKEN).build()

    global HC
    creds = {"login": LOGIN, "password": PASSWORD, "remember": 1}

    HC = HomeChecker(creds=creds)

    application.add_handler(CommandHandler("send_ok", send_ok))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
